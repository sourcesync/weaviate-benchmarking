# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatasetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controllers_dataset_controller_add_data(self, body, allocation_token, **kwargs):  # noqa: E501
        """Add data into a loaded dataset.  # noqa: E501

        API will add a lists of records into the loaded dataset.<br> Records will be located at the end of the dataset records in order.<br> API won't update the dataset base file in file system (refer to /commit/transactions API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_add_data(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDataRequest body: (required)
        :param str allocation_token: (required)
        :return: AddDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_add_data_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_add_data_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_add_data_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Add data into a loaded dataset.  # noqa: E501

        API will add a lists of records into the loaded dataset.<br> Records will be located at the end of the dataset records in order.<br> API won't update the dataset base file in file system (refer to /commit/transactions API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_add_data_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddDataRequest body: (required)
        :param str allocation_token: (required)
        :return: AddDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_add_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_add_data`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_add_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/vector/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_commit_transactions(self, body, allocation_token, **kwargs):  # noqa: E501
        """Apply transactions actions over the base dataset file.  # noqa: E501

        API will apply an add/remove actions which has been performed over the loaded dataset into the dataset base file. After applying changes all committed actions will be purged and dataset will be reloaded to the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_commit_transactions(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommitTransactionsRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_commit_transactions_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_commit_transactions_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_commit_transactions_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Apply transactions actions over the base dataset file.  # noqa: E501

        API will apply an add/remove actions which has been performed over the loaded dataset into the dataset base file. After applying changes all committed actions will be purged and dataset will be reloaded to the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_commit_transactions_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CommitTransactionsRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_commit_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_commit_transactions`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_commit_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/transaction/commit', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_focus_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Focus on a loaded dataset that you want to search in.  # noqa: E501

        GSI enables you to load more than one dataset to the APU system memory. The “focus” dataset refers to the dataset that is ready for search. By default, the first dataset you load will be the “focus” dataset. To search other loaded datasets, put them in focus by defining the datasetID and allocation ID – which you get from the /allocate endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_focus_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FocusDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_focus_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_focus_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_focus_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Focus on a loaded dataset that you want to search in.  # noqa: E501

        GSI enables you to load more than one dataset to the APU system memory. The “focus” dataset refers to the dataset that is ready for search. By default, the first dataset you load will be the “focus” dataset. To search other loaded datasets, put them in focus by defining the datasetID and allocation ID – which you get from the /allocate endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_focus_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FocusDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_focus_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_focus_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_focus_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/focus', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_get_datasets_list(self, allocation_token, **kwargs):  # noqa: E501
        """Get the list of available datasets.  # noqa: E501

        List of datasets includes details like id, encoding details, number of features, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_datasets_list(allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_token: (required)
        :return: GetDatasetsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_get_datasets_list_with_http_info(allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_get_datasets_list_with_http_info(allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_get_datasets_list_with_http_info(self, allocation_token, **kwargs):  # noqa: E501
        """Get the list of available datasets.  # noqa: E501

        List of datasets includes details like id, encoding details, number of features, etc.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_datasets_list_with_http_info(allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_token: (required)
        :return: GetDatasetsListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_get_datasets_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_get_datasets_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDatasetsListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_get_focused_dataset(self, allocation_id, allocation_token, **kwargs):  # noqa: E501
        """Find out which dataset is in focus.  # noqa: E501

        Get the ID of the dataset that is currently in focus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_focused_dataset(allocation_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_id: The UID representing an allocation of a specific number of APU boards. It is generated using the  /allocate endpoint. (required)
        :param str allocation_token: (required)
        :return: GetFocusedDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_get_focused_dataset_with_http_info(allocation_id, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_get_focused_dataset_with_http_info(allocation_id, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_get_focused_dataset_with_http_info(self, allocation_id, allocation_token, **kwargs):  # noqa: E501
        """Find out which dataset is in focus.  # noqa: E501

        Get the ID of the dataset that is currently in focus.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_focused_dataset_with_http_info(allocation_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_id: The UID representing an allocation of a specific number of APU boards. It is generated using the  /allocate endpoint. (required)
        :param str allocation_token: (required)
        :return: GetFocusedDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocation_id', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_get_focused_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocation_id' is set
        if ('allocation_id' not in params or
                params['allocation_id'] is None):
            raise ValueError("Missing the required parameter `allocation_id` when calling `controllers_dataset_controller_get_focused_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_get_focused_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'allocation_id' in params:
            path_params['allocation_id'] = params['allocation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/focused/{allocation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetFocusedDatasetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_get_transactions(self, dataset_id, allocation_token, **kwargs):  # noqa: E501
        """Get list of pending transactions for a selected dataset.  # noqa: E501

        A pending transaction is an add/remove action which is performed over a loaded dataset and didn't commit. If a dataset is reloaded, its pending transaction will be processed during the load phase. A pending transaction can be rolled back or committed (applied to the base dataset file).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_transactions(dataset_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: Dataset UID identifies the specific dataset to use. It is generated using the /import/dataset endpoint. (required)
        :param str allocation_token: (required)
        :return: GetTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_get_transactions_with_http_info(dataset_id, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_get_transactions_with_http_info(dataset_id, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_get_transactions_with_http_info(self, dataset_id, allocation_token, **kwargs):  # noqa: E501
        """Get list of pending transactions for a selected dataset.  # noqa: E501

        A pending transaction is an add/remove action which is performed over a loaded dataset and didn't commit. If a dataset is reloaded, its pending transaction will be processed during the load phase. A pending transaction can be rolled back or committed (applied to the base dataset file).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_transactions_with_http_info(dataset_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: Dataset UID identifies the specific dataset to use. It is generated using the /import/dataset endpoint. (required)
        :param str allocation_token: (required)
        :return: GetTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_get_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `controllers_dataset_controller_get_transactions`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_get_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/transaction/list/{dataset_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_import_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a file of records as a dataset.  # noqa: E501

        Import a dataset into the system. As part of the import, if toTrain flag is True, the dataset will be trained.<br> Number of dataset records supported is 2250 records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_import_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_import_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_import_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a file of records as a dataset.  # noqa: E501

        Import a dataset into the system. As part of the import, if toTrain flag is True, the dataset will be trained.<br> Number of dataset records supported is 2250 records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportDatasetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_import_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_import_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_import_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportDatasetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_import_metadata(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a metadata file.  # noqa: E501

        Import a metadata file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_metadata(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportMetadataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_import_metadata_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_import_metadata_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_import_metadata_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a metadata file.  # noqa: E501

        Import a metadata file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_metadata_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportMetadataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_import_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_import_metadata`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_import_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/metadata/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_import_neural_matrix(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a neural matrix file.  # noqa: E501

        Associate an external neural matrix with an existing dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_neural_matrix(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportNeuralMatrixRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportNeuralMatrixResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_import_neural_matrix_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_import_neural_matrix_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_import_neural_matrix_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a neural matrix file.  # noqa: E501

        Associate an external neural matrix with an existing dataset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_neural_matrix_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportNeuralMatrixRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportNeuralMatrixResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_import_neural_matrix" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_import_neural_matrix`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_import_neural_matrix`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/neuralmatrix/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportNeuralMatrixResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_load_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Load a dataset into the APU.  # noqa: E501

        Load the specified dataset into the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_load_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoadDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_load_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_load_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_load_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Load a dataset into the APU.  # noqa: E501

        Load the specified dataset into the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_load_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LoadDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_load_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_load_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_load_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/load', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_reload_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Unload and reload a dataset into the APU memory.  # noqa: E501

        API will unload and will load the dataset with the same parameters as it was loaded with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_reload_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReloadDataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_reload_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_reload_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_reload_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Unload and reload a dataset into the APU memory.  # noqa: E501

        API will unload and will load the dataset with the same parameters as it was loaded with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_reload_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ReloadDataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_reload_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_reload_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_reload_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/reload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_remove_data(self, body, allocation_token, **kwargs):  # noqa: E501
        """Remove data from a loaded dataset.  # noqa: E501

        API will remove a list of records from a loaded dataset. Records will be removed but the dataset won't be re-organized (if record 0 will be deleted record 1 location's won't be changed). API won't update the dataset base file in the file system (refer to /commit/transactions API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_data(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveDataRequest body: (required)
        :param str allocation_token: (required)
        :return: RemoveDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_remove_data_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_remove_data_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_remove_data_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Remove data from a loaded dataset.  # noqa: E501

        API will remove a list of records from a loaded dataset. Records will be removed but the dataset won't be re-organized (if record 0 will be deleted record 1 location's won't be changed). API won't update the dataset base file in the file system (refer to /commit/transactions API).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_data_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveDataRequest body: (required)
        :param str allocation_token: (required)
        :return: RemoveDataResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_remove_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_remove_data`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_remove_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/vector/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveDataResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_remove_dataset(self, dataset_id, allocation_token, **kwargs):  # noqa: E501
        """Remove a dataset  # noqa: E501

        Remove a dataset from the list of availabe datasets. The API will clean the corresponding generated data for the dataset from the workspact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_dataset(dataset_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: Dataset UID identifies the specific dataset to use. It is generated using the /import/dataset endpoint. (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_remove_dataset_with_http_info(dataset_id, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_remove_dataset_with_http_info(dataset_id, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_remove_dataset_with_http_info(self, dataset_id, allocation_token, **kwargs):  # noqa: E501
        """Remove a dataset  # noqa: E501

        Remove a dataset from the list of availabe datasets. The API will clean the corresponding generated data for the dataset from the workspact.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_dataset_with_http_info(dataset_id, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dataset_id: Dataset UID identifies the specific dataset to use. It is generated using the /import/dataset endpoint. (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dataset_id', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_remove_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `controllers_dataset_controller_remove_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_remove_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dataset_id' in params:
            path_params['dataset_id'] = params['dataset_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/remove/{dataset_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_remove_metadata(self, body, allocation_token, **kwargs):  # noqa: E501
        """Remove data from a loaded dataset by index of metadata  # noqa: E501

        API will remove a record from a loaded dataset. The function will locate a metadata value by metadata file - which is unique and it will fail incase it is not. If that metadata record is found, then it will remove the record based on its index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_metadata(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveMetaDataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_remove_metadata_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_remove_metadata_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_remove_metadata_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Remove data from a loaded dataset by index of metadata  # noqa: E501

        API will remove a record from a loaded dataset. The function will locate a metadata value by metadata file - which is unique and it will fail incase it is not. If that metadata record is found, then it will remove the record based on its index  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_remove_metadata_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveMetaDataRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_remove_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_remove_metadata`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_remove_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/metadata/remove', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_rollback_transactions(self, body, allocation_token, **kwargs):  # noqa: E501
        """Rollback pending dataset transactions.  # noqa: E501

        API will delete the pending transaction for the dataset.<br> API will reload the dataset without the pending transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_rollback_transactions(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollbackTransactionsRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_rollback_transactions_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_rollback_transactions_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_rollback_transactions_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Rollback pending dataset transactions.  # noqa: E501

        API will delete the pending transaction for the dataset.<br> API will reload the dataset without the pending transactions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_rollback_transactions_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RollbackTransactionsRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_rollback_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_rollback_transactions`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_rollback_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/transaction/rollback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_search_accuracy(self, body, allocation_token, **kwargs):  # noqa: E501
        """Search for the hamming k to get the target accuracy.  # noqa: E501

        Set search accuracy, compared to ground truth. The output is hamming k. This function allows you to set the search accuracy. If you do not use this function, search accuracy will be set automatically as part of the /import/dataset endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_search_accuracy(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchAccuracyRequest body: (required)
        :param str allocation_token: (required)
        :return: SearchAccuracyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_search_accuracy_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_search_accuracy_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_search_accuracy_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Search for the hamming k to get the target accuracy.  # noqa: E501

        Set search accuracy, compared to ground truth. The output is hamming k. This function allows you to set the search accuracy. If you do not use this function, search accuracy will be set automatically as part of the /import/dataset endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_search_accuracy_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SearchAccuracyRequest body: (required)
        :param str allocation_token: (required)
        :return: SearchAccuracyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_search_accuracy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_search_accuracy`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_search_accuracy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/accuracy/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchAccuracyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_set_neural_matrix_active(self, body, allocation_token, **kwargs):  # noqa: E501
        """Set default neural matrix for a dataset.  # noqa: E501

        By default, the server will use the latest neural matrix which was imported (by import dataset or import neural matrix functions). User can change to a different neural matrix to be used while running search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_set_neural_matrix_active(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetNeuralMatrixActiveRequest body: (required)
        :param str allocation_token: (required)
        :return: SetNeuralMatrixActiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_set_neural_matrix_active_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_set_neural_matrix_active_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_set_neural_matrix_active_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Set default neural matrix for a dataset.  # noqa: E501

        By default, the server will use the latest neural matrix which was imported (by import dataset or import neural matrix functions). User can change to a different neural matrix to be used while running search.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_set_neural_matrix_active_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetNeuralMatrixActiveRequest body: (required)
        :param str allocation_token: (required)
        :return: SetNeuralMatrixActiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_set_neural_matrix_active" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_set_neural_matrix_active`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_set_neural_matrix_active`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/neuralmatrix/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetNeuralMatrixActiveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_train_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Train an existing dataset  # noqa: E501

        Train an existing dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_train_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_train_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_train_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_train_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Train an existing dataset  # noqa: E501

        Train an existing dataset  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_train_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TrainDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_train_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_train_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_train_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/train', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_unload_dataset(self, body, allocation_token, **kwargs):  # noqa: E501
        """Unload a dataset  # noqa: E501

        Unload a dataset from the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_unload_dataset(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnloadDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_unload_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_unload_dataset_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_unload_dataset_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Unload a dataset  # noqa: E501

        Unload a dataset from the APU.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_unload_dataset_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UnloadDatasetRequest body: (required)
        :param str allocation_token: (required)
        :return: StatusOkResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_unload_dataset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_unload_dataset`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_unload_dataset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/unload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOkResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
