# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accuracy': 'list[list[str]]',
        'distance': 'list[list[str]]',
        'indices': 'list[list[int]]',
        'metadata': 'list[list[str]]',
        'search': 'str',
        'total': 'str',
        'csv_results_file_path': 'str'
    }

    attribute_map = {
        'accuracy': 'accuracy',
        'distance': 'distance',
        'indices': 'indices',
        'metadata': 'metadata',
        'search': 'search',
        'total': 'total',
        'csv_results_file_path': 'csv_results_file_path'
    }

    def __init__(self, accuracy=None, distance=None, indices=None, metadata=None, search=None, total=None, csv_results_file_path=None):  # noqa: E501
        """SearchResponse - a model defined in Swagger"""  # noqa: E501
        self._accuracy = None
        self._distance = None
        self._indices = None
        self._metadata = None
        self._search = None
        self._total = None
        self._csv_results_file_path = None
        self.discriminator = None
        if accuracy is not None:
            self.accuracy = accuracy
        if distance is not None:
            self.distance = distance
        if indices is not None:
            self.indices = indices
        if metadata is not None:
            self.metadata = metadata
        if search is not None:
            self.search = search
        if total is not None:
            self.total = total
        if csv_results_file_path is not None:
            self.csv_results_file_path = csv_results_file_path

    @property
    def accuracy(self):
        """Gets the accuracy of this SearchResponse.  # noqa: E501

        Two-dimensional array represents the queries' k nearest neighbor accuracy.  # noqa: E501

        :return: The accuracy of this SearchResponse.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this SearchResponse.

        Two-dimensional array represents the queries' k nearest neighbor accuracy.  # noqa: E501

        :param accuracy: The accuracy of this SearchResponse.  # noqa: E501
        :type: list[list[str]]
        """

        self._accuracy = accuracy

    @property
    def distance(self):
        """Gets the distance of this SearchResponse.  # noqa: E501

        Two-dimensional array represents the queries' k nearest neighbor distance.  # noqa: E501

        :return: The distance of this SearchResponse.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this SearchResponse.

        Two-dimensional array represents the queries' k nearest neighbor distance.  # noqa: E501

        :param distance: The distance of this SearchResponse.  # noqa: E501
        :type: list[list[str]]
        """

        self._distance = distance

    @property
    def indices(self):
        """Gets the indices of this SearchResponse.  # noqa: E501

        Two-dimensional array represents the queries' k nearest neighbor indices.  # noqa: E501

        :return: The indices of this SearchResponse.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._indices

    @indices.setter
    def indices(self, indices):
        """Sets the indices of this SearchResponse.

        Two-dimensional array represents the queries' k nearest neighbor indices.  # noqa: E501

        :param indices: The indices of this SearchResponse.  # noqa: E501
        :type: list[list[int]]
        """

        self._indices = indices

    @property
    def metadata(self):
        """Gets the metadata of this SearchResponse.  # noqa: E501

        Two-dimensional array represents the queries' k nearest neighbor metadata.  # noqa: E501

        :return: The metadata of this SearchResponse.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SearchResponse.

        Two-dimensional array represents the queries' k nearest neighbor metadata.  # noqa: E501

        :param metadata: The metadata of this SearchResponse.  # noqa: E501
        :type: list[list[str]]
        """

        self._metadata = metadata

    @property
    def search(self):
        """Gets the search of this SearchResponse.  # noqa: E501

        Time taken for the APU search only.  # noqa: E501

        :return: The search of this SearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this SearchResponse.

        Time taken for the APU search only.  # noqa: E501

        :param search: The search of this SearchResponse.  # noqa: E501
        :type: str
        """

        self._search = search

    @property
    def total(self):
        """Gets the total of this SearchResponse.  # noqa: E501

        Time taken for the total search.  # noqa: E501

        :return: The total of this SearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchResponse.

        Time taken for the total search.  # noqa: E501

        :param total: The total of this SearchResponse.  # noqa: E501
        :type: str
        """

        self._total = total

    @property
    def csv_results_file_path(self):
        """Gets the csv_results_file_path of this SearchResponse.  # noqa: E501

        Path to directory where the search results will be saved as a CSV file.  # noqa: E501

        :return: The csv_results_file_path of this SearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._csv_results_file_path

    @csv_results_file_path.setter
    def csv_results_file_path(self, csv_results_file_path):
        """Sets the csv_results_file_path of this SearchResponse.

        Path to directory where the search results will be saved as a CSV file.  # noqa: E501

        :param csv_results_file_path: The csv_results_file_path of this SearchResponse.  # noqa: E501
        :type: str
        """

        self._csv_results_file_path = csv_results_file_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
