# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchAccuracyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dataset_id': 'str',
        'neural_matrix_id': 'str',
        'queries_file_p': 'str',
        'nqueries': 'int',
        'initial_hamming_k': 'int',
        'max_hamming_k': 'int',
        'hamming_k_interval': 'int',
        'topk': 'int',
        'normalize': 'bool',
        'number_of_iterations': 'int',
        'target_accuracy': 'float',
        'detailed_report': 'bool',
        'update_dataset_hamming_k': 'bool'
    }

    attribute_map = {
        'dataset_id': 'datasetId',
        'neural_matrix_id': 'neuralMatrixId',
        'queries_file_p': 'queries_file_p',
        'nqueries': 'nqueries',
        'initial_hamming_k': 'initialHammingK',
        'max_hamming_k': 'maxHammingK',
        'hamming_k_interval': 'hammingKInterval',
        'topk': 'topk',
        'normalize': 'normalize',
        'number_of_iterations': 'numberOfIterations',
        'target_accuracy': 'targetAccuracy',
        'detailed_report': 'detailed_report',
        'update_dataset_hamming_k': 'updateDatasetHammingK'
    }

    def __init__(self, dataset_id=None, neural_matrix_id=None, queries_file_p=None, nqueries=30, initial_hamming_k=1000, max_hamming_k=8000, hamming_k_interval=1000, topk=25, normalize=False, number_of_iterations=3, target_accuracy=100, detailed_report=False, update_dataset_hamming_k=False):  # noqa: E501
        """SearchAccuracyRequest - a model defined in Swagger"""  # noqa: E501
        self._dataset_id = None
        self._neural_matrix_id = None
        self._queries_file_p = None
        self._nqueries = None
        self._initial_hamming_k = None
        self._max_hamming_k = None
        self._hamming_k_interval = None
        self._topk = None
        self._normalize = None
        self._number_of_iterations = None
        self._target_accuracy = None
        self._detailed_report = None
        self._update_dataset_hamming_k = None
        self.discriminator = None
        self.dataset_id = dataset_id
        if neural_matrix_id is not None:
            self.neural_matrix_id = neural_matrix_id
        if queries_file_p is not None:
            self.queries_file_p = queries_file_p
        if nqueries is not None:
            self.nqueries = nqueries
        if initial_hamming_k is not None:
            self.initial_hamming_k = initial_hamming_k
        if max_hamming_k is not None:
            self.max_hamming_k = max_hamming_k
        if hamming_k_interval is not None:
            self.hamming_k_interval = hamming_k_interval
        if topk is not None:
            self.topk = topk
        if normalize is not None:
            self.normalize = normalize
        if number_of_iterations is not None:
            self.number_of_iterations = number_of_iterations
        if target_accuracy is not None:
            self.target_accuracy = target_accuracy
        if detailed_report is not None:
            self.detailed_report = detailed_report
        if update_dataset_hamming_k is not None:
            self.update_dataset_hamming_k = update_dataset_hamming_k

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SearchAccuracyRequest.  # noqa: E501

        The datasetId identifies the specific dataset to search. It is generated using the /import/dataset endpoint.  # noqa: E501

        :return: The dataset_id of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SearchAccuracyRequest.

        The datasetId identifies the specific dataset to search. It is generated using the /import/dataset endpoint.  # noqa: E501

        :param dataset_id: The dataset_id of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def neural_matrix_id(self):
        """Gets the neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501

        Neural matrix UID. It is generated using the /import/dataset or /import/neuralMatrix endpoints (using default active neural matrix UID if null passed).  # noqa: E501

        :return: The neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._neural_matrix_id

    @neural_matrix_id.setter
    def neural_matrix_id(self, neural_matrix_id):
        """Sets the neural_matrix_id of this SearchAccuracyRequest.

        Neural matrix UID. It is generated using the /import/dataset or /import/neuralMatrix endpoints (using default active neural matrix UID if null passed).  # noqa: E501

        :param neural_matrix_id: The neural_matrix_id of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """

        self._neural_matrix_id = neural_matrix_id

    @property
    def queries_file_p(self):
        """Gets the queries_file_p of this SearchAccuracyRequest.  # noqa: E501

        Path to a queries file to use for search accuracy  # noqa: E501

        :return: The queries_file_p of this SearchAccuracyRequest.  # noqa: E501
        :rtype: str
        """
        return self._queries_file_p

    @queries_file_p.setter
    def queries_file_p(self, queries_file_p):
        """Sets the queries_file_p of this SearchAccuracyRequest.

        Path to a queries file to use for search accuracy  # noqa: E501

        :param queries_file_p: The queries_file_p of this SearchAccuracyRequest.  # noqa: E501
        :type: str
        """

        self._queries_file_p = queries_file_p

    @property
    def nqueries(self):
        """Gets the nqueries of this SearchAccuracyRequest.  # noqa: E501

        Number of queries  # noqa: E501

        :return: The nqueries of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._nqueries

    @nqueries.setter
    def nqueries(self, nqueries):
        """Sets the nqueries of this SearchAccuracyRequest.

        Number of queries  # noqa: E501

        :param nqueries: The nqueries of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._nqueries = nqueries

    @property
    def initial_hamming_k(self):
        """Gets the initial_hamming_k of this SearchAccuracyRequest.  # noqa: E501

        The desired hamming k results from the APU search (per dataset or system-default).  # noqa: E501

        :return: The initial_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._initial_hamming_k

    @initial_hamming_k.setter
    def initial_hamming_k(self, initial_hamming_k):
        """Sets the initial_hamming_k of this SearchAccuracyRequest.

        The desired hamming k results from the APU search (per dataset or system-default).  # noqa: E501

        :param initial_hamming_k: The initial_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._initial_hamming_k = initial_hamming_k

    @property
    def max_hamming_k(self):
        """Gets the max_hamming_k of this SearchAccuracyRequest.  # noqa: E501

        The maximum hamming k.  # noqa: E501

        :return: The max_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_hamming_k

    @max_hamming_k.setter
    def max_hamming_k(self, max_hamming_k):
        """Sets the max_hamming_k of this SearchAccuracyRequest.

        The maximum hamming k.  # noqa: E501

        :param max_hamming_k: The max_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._max_hamming_k = max_hamming_k

    @property
    def hamming_k_interval(self):
        """Gets the hamming_k_interval of this SearchAccuracyRequest.  # noqa: E501

        The maximum hamming k.  # noqa: E501

        :return: The hamming_k_interval of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._hamming_k_interval

    @hamming_k_interval.setter
    def hamming_k_interval(self, hamming_k_interval):
        """Sets the hamming_k_interval of this SearchAccuracyRequest.

        The maximum hamming k.  # noqa: E501

        :param hamming_k_interval: The hamming_k_interval of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._hamming_k_interval = hamming_k_interval

    @property
    def topk(self):
        """Gets the topk of this SearchAccuracyRequest.  # noqa: E501

        Max number of results to re-rank from APU hamming search function.  # noqa: E501

        :return: The topk of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._topk

    @topk.setter
    def topk(self, topk):
        """Sets the topk of this SearchAccuracyRequest.

        Max number of results to re-rank from APU hamming search function.  # noqa: E501

        :param topk: The topk of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._topk = topk

    @property
    def normalize(self):
        """Gets the normalize of this SearchAccuracyRequest.  # noqa: E501

        Flag indicates whether dataset should be normalized (of values between 0 to 1).  # noqa: E501

        :return: The normalize of this SearchAccuracyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._normalize

    @normalize.setter
    def normalize(self, normalize):
        """Sets the normalize of this SearchAccuracyRequest.

        Flag indicates whether dataset should be normalized (of values between 0 to 1).  # noqa: E501

        :param normalize: The normalize of this SearchAccuracyRequest.  # noqa: E501
        :type: bool
        """

        self._normalize = normalize

    @property
    def number_of_iterations(self):
        """Gets the number_of_iterations of this SearchAccuracyRequest.  # noqa: E501

        After the training process you have the weights, you now want to determine the hamming-k for search. to do this we run a search on all the dataset using set of random queries. You create GT for these queries and then you run search on the n queries (e.g. 30). Let’s say accuracy is 80%. Search starts with x hamming k, compares to GT, and checks accuracy. This process continues until the target accuracy is reached (e.g. hamming k = 1000, for target accuracy of 80%). To improve accuracy this process can be repeated. Each search process is an iteration. The default is 3 iterations  # noqa: E501

        :return: The number_of_iterations of this SearchAccuracyRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_iterations

    @number_of_iterations.setter
    def number_of_iterations(self, number_of_iterations):
        """Sets the number_of_iterations of this SearchAccuracyRequest.

        After the training process you have the weights, you now want to determine the hamming-k for search. to do this we run a search on all the dataset using set of random queries. You create GT for these queries and then you run search on the n queries (e.g. 30). Let’s say accuracy is 80%. Search starts with x hamming k, compares to GT, and checks accuracy. This process continues until the target accuracy is reached (e.g. hamming k = 1000, for target accuracy of 80%). To improve accuracy this process can be repeated. Each search process is an iteration. The default is 3 iterations  # noqa: E501

        :param number_of_iterations: The number_of_iterations of this SearchAccuracyRequest.  # noqa: E501
        :type: int
        """

        self._number_of_iterations = number_of_iterations

    @property
    def target_accuracy(self):
        """Gets the target_accuracy of this SearchAccuracyRequest.  # noqa: E501

        THe desried accuracy, expressed as a percentage.  # noqa: E501

        :return: The target_accuracy of this SearchAccuracyRequest.  # noqa: E501
        :rtype: float
        """
        return self._target_accuracy

    @target_accuracy.setter
    def target_accuracy(self, target_accuracy):
        """Sets the target_accuracy of this SearchAccuracyRequest.

        THe desried accuracy, expressed as a percentage.  # noqa: E501

        :param target_accuracy: The target_accuracy of this SearchAccuracyRequest.  # noqa: E501
        :type: float
        """

        self._target_accuracy = target_accuracy

    @property
    def detailed_report(self):
        """Gets the detailed_report of this SearchAccuracyRequest.  # noqa: E501


        :return: The detailed_report of this SearchAccuracyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._detailed_report

    @detailed_report.setter
    def detailed_report(self, detailed_report):
        """Sets the detailed_report of this SearchAccuracyRequest.


        :param detailed_report: The detailed_report of this SearchAccuracyRequest.  # noqa: E501
        :type: bool
        """

        self._detailed_report = detailed_report

    @property
    def update_dataset_hamming_k(self):
        """Gets the update_dataset_hamming_k of this SearchAccuracyRequest.  # noqa: E501


        :return: The update_dataset_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._update_dataset_hamming_k

    @update_dataset_hamming_k.setter
    def update_dataset_hamming_k(self, update_dataset_hamming_k):
        """Sets the update_dataset_hamming_k of this SearchAccuracyRequest.


        :param update_dataset_hamming_k: The update_dataset_hamming_k of this SearchAccuracyRequest.  # noqa: E501
        :type: bool
        """

        self._update_dataset_hamming_k = update_dataset_hamming_k

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchAccuracyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchAccuracyRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
