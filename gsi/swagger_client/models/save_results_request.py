# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SaveResultsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'distance': 'list[list[str]]',
        'indices': 'list[list[int]]',
        'directory_to_save_results': 'str',
        'dataset_id': 'str',
        'results_file_type': 'str'
    }

    attribute_map = {
        'distance': 'distance',
        'indices': 'indices',
        'directory_to_save_results': 'directory_to_save_results',
        'dataset_id': 'datasetId',
        'results_file_type': 'resultsFileType'
    }

    def __init__(self, distance=None, indices=None, directory_to_save_results=None, dataset_id=None, results_file_type='json'):  # noqa: E501
        """SaveResultsRequest - a model defined in Swagger"""  # noqa: E501
        self._distance = None
        self._indices = None
        self._directory_to_save_results = None
        self._dataset_id = None
        self._results_file_type = None
        self.discriminator = None
        self.distance = distance
        self.indices = indices
        if directory_to_save_results is not None:
            self.directory_to_save_results = directory_to_save_results
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if results_file_type is not None:
            self.results_file_type = results_file_type

    @property
    def distance(self):
        """Gets the distance of this SaveResultsRequest.  # noqa: E501

        Two-dimensional array representing the queries' k nearest neighbor distances.  # noqa: E501

        :return: The distance of this SaveResultsRequest.  # noqa: E501
        :rtype: list[list[str]]
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this SaveResultsRequest.

        Two-dimensional array representing the queries' k nearest neighbor distances.  # noqa: E501

        :param distance: The distance of this SaveResultsRequest.  # noqa: E501
        :type: list[list[str]]
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def indices(self):
        """Gets the indices of this SaveResultsRequest.  # noqa: E501

        Two-dimensional array representing the queries' k nearest neighbor indices.  # noqa: E501

        :return: The indices of this SaveResultsRequest.  # noqa: E501
        :rtype: list[list[int]]
        """
        return self._indices

    @indices.setter
    def indices(self, indices):
        """Sets the indices of this SaveResultsRequest.

        Two-dimensional array representing the queries' k nearest neighbor indices.  # noqa: E501

        :param indices: The indices of this SaveResultsRequest.  # noqa: E501
        :type: list[list[int]]
        """
        if indices is None:
            raise ValueError("Invalid value for `indices`, must not be `None`")  # noqa: E501

        self._indices = indices

    @property
    def directory_to_save_results(self):
        """Gets the directory_to_save_results of this SaveResultsRequest.  # noqa: E501

        Path to a directory where results will be saved. If null, datasetId Must not be null  # noqa: E501

        :return: The directory_to_save_results of this SaveResultsRequest.  # noqa: E501
        :rtype: str
        """
        return self._directory_to_save_results

    @directory_to_save_results.setter
    def directory_to_save_results(self, directory_to_save_results):
        """Sets the directory_to_save_results of this SaveResultsRequest.

        Path to a directory where results will be saved. If null, datasetId Must not be null  # noqa: E501

        :param directory_to_save_results: The directory_to_save_results of this SaveResultsRequest.  # noqa: E501
        :type: str
        """

        self._directory_to_save_results = directory_to_save_results

    @property
    def dataset_id(self):
        """Gets the dataset_id of this SaveResultsRequest.  # noqa: E501

        The dataset id which associated with the results. parameter will be used in order to save results in workspace only if directory_to_save_results parameter is empty. If null, directory_to_save_results Must not be null  # noqa: E501

        :return: The dataset_id of this SaveResultsRequest.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this SaveResultsRequest.

        The dataset id which associated with the results. parameter will be used in order to save results in workspace only if directory_to_save_results parameter is empty. If null, directory_to_save_results Must not be null  # noqa: E501

        :param dataset_id: The dataset_id of this SaveResultsRequest.  # noqa: E501
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def results_file_type(self):
        """Gets the results_file_type of this SaveResultsRequest.  # noqa: E501

        Indicates whether to save the results as csv or json file  # noqa: E501

        :return: The results_file_type of this SaveResultsRequest.  # noqa: E501
        :rtype: str
        """
        return self._results_file_type

    @results_file_type.setter
    def results_file_type(self, results_file_type):
        """Sets the results_file_type of this SaveResultsRequest.

        Indicates whether to save the results as csv or json file  # noqa: E501

        :param results_file_type: The results_file_type of this SaveResultsRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["json", "csv"]  # noqa: E501
        if results_file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `results_file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(results_file_type, allowed_values)
            )

        self._results_file_type = results_file_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveResultsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveResultsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
