# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddNeuralMatrixResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sys_cre_date': 'str',
        'neural_matrix_file_path': 'str',
        'dataset_file_path': 'str',
        'nbits': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sys_cre_date': 'sysCreDate',
        'neural_matrix_file_path': 'neuralMatrixFilePath',
        'dataset_file_path': 'datasetFilePath',
        'nbits': 'nbits'
    }

    def __init__(self, id=None, sys_cre_date=None, neural_matrix_file_path=None, dataset_file_path=None, nbits=None):  # noqa: E501
        """AddNeuralMatrixResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sys_cre_date = None
        self._neural_matrix_file_path = None
        self._dataset_file_path = None
        self._nbits = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sys_cre_date is not None:
            self.sys_cre_date = sys_cre_date
        if neural_matrix_file_path is not None:
            self.neural_matrix_file_path = neural_matrix_file_path
        if dataset_file_path is not None:
            self.dataset_file_path = dataset_file_path
        if nbits is not None:
            self.nbits = nbits

    @property
    def id(self):
        """Gets the id of this AddNeuralMatrixResponse.  # noqa: E501


        :return: The id of this AddNeuralMatrixResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AddNeuralMatrixResponse.


        :param id: The id of this AddNeuralMatrixResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sys_cre_date(self):
        """Gets the sys_cre_date of this AddNeuralMatrixResponse.  # noqa: E501


        :return: The sys_cre_date of this AddNeuralMatrixResponse.  # noqa: E501
        :rtype: str
        """
        return self._sys_cre_date

    @sys_cre_date.setter
    def sys_cre_date(self, sys_cre_date):
        """Sets the sys_cre_date of this AddNeuralMatrixResponse.


        :param sys_cre_date: The sys_cre_date of this AddNeuralMatrixResponse.  # noqa: E501
        :type: str
        """

        self._sys_cre_date = sys_cre_date

    @property
    def neural_matrix_file_path(self):
        """Gets the neural_matrix_file_path of this AddNeuralMatrixResponse.  # noqa: E501


        :return: The neural_matrix_file_path of this AddNeuralMatrixResponse.  # noqa: E501
        :rtype: str
        """
        return self._neural_matrix_file_path

    @neural_matrix_file_path.setter
    def neural_matrix_file_path(self, neural_matrix_file_path):
        """Sets the neural_matrix_file_path of this AddNeuralMatrixResponse.


        :param neural_matrix_file_path: The neural_matrix_file_path of this AddNeuralMatrixResponse.  # noqa: E501
        :type: str
        """

        self._neural_matrix_file_path = neural_matrix_file_path

    @property
    def dataset_file_path(self):
        """Gets the dataset_file_path of this AddNeuralMatrixResponse.  # noqa: E501


        :return: The dataset_file_path of this AddNeuralMatrixResponse.  # noqa: E501
        :rtype: str
        """
        return self._dataset_file_path

    @dataset_file_path.setter
    def dataset_file_path(self, dataset_file_path):
        """Sets the dataset_file_path of this AddNeuralMatrixResponse.


        :param dataset_file_path: The dataset_file_path of this AddNeuralMatrixResponse.  # noqa: E501
        :type: str
        """

        self._dataset_file_path = dataset_file_path

    @property
    def nbits(self):
        """Gets the nbits of this AddNeuralMatrixResponse.  # noqa: E501


        :return: The nbits of this AddNeuralMatrixResponse.  # noqa: E501
        :rtype: int
        """
        return self._nbits

    @nbits.setter
    def nbits(self, nbits):
        """Sets the nbits of this AddNeuralMatrixResponse.


        :param nbits: The nbits of this AddNeuralMatrixResponse.  # noqa: E501
        :type: int
        """

        self._nbits = nbits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddNeuralMatrixResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddNeuralMatrixResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
