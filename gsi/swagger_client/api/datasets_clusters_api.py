# coding: utf-8

"""
    GSI Floating-Point 32 API

    **Introduction**<br> GSI Technology’s floating-point similarity search API provides an accessible gateway to running searches on GSI’s Gemini® Associative Processing Unit (APU).<br> It works in conjunction with the GSI system management solution which enables users to work with multiple APU boards simultaneously for improved performance.<br><br> **Dataset and Query Format**<br> Dataset embeddings can be in 32- or 64-bit floating point format, and any number of features, e.g. 256 or 512 (there is no upper limit).<br> Query embeddings must have the same floating-point format and number of features as used in the dataset.<br> GSI performs the search and delivers the top-k most similar results.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DatasetsClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards(self, allocation_token, dataset_id, num_of_boards, **kwargs):  # noqa: E501
        """Get list of available centroid configurations.  # noqa: E501

        API will filter out all the cluster configurations which are not stand with the number of APUs to be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards(allocation_token, dataset_id, num_of_boards, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_token: (required)
        :param str dataset_id: Dataset UID identifies specific dataset to get its centroids. It is generated using the /import/dataset endpoint. (required)
        :param int num_of_boards: Number of boards to be used in the search. (required)
        :return: GetEligibleDatasetClustersByNumBoardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards_with_http_info(allocation_token, dataset_id, num_of_boards, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards_with_http_info(allocation_token, dataset_id, num_of_boards, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards_with_http_info(self, allocation_token, dataset_id, num_of_boards, **kwargs):  # noqa: E501
        """Get list of available centroid configurations.  # noqa: E501

        API will filter out all the cluster configurations which are not stand with the number of APUs to be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards_with_http_info(allocation_token, dataset_id, num_of_boards, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str allocation_token: (required)
        :param str dataset_id: Dataset UID identifies specific dataset to get its centroids. It is generated using the /import/dataset endpoint. (required)
        :param int num_of_boards: Number of boards to be used in the search. (required)
        :return: GetEligibleDatasetClustersByNumBoardsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['allocation_token', 'dataset_id', 'num_of_boards']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards`")  # noqa: E501
        # verify the required parameter 'dataset_id' is set
        if ('dataset_id' not in params or
                params['dataset_id'] is None):
            raise ValueError("Missing the required parameter `dataset_id` when calling `controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards`")  # noqa: E501
        # verify the required parameter 'num_of_boards' is set
        if ('num_of_boards' not in params or
                params['num_of_boards'] is None):
            raise ValueError("Missing the required parameter `num_of_boards` when calling `controllers_dataset_controller_get_eligible_dataset_clusters_by_num_boards`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dataset_id' in params:
            query_params.append(('dataset_id', params['dataset_id']))  # noqa: E501
        if 'num_of_boards' in params:
            query_params.append(('num_of_boards', params['num_of_boards']))  # noqa: E501

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/centroid/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetEligibleDatasetClustersByNumBoardsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_import_clusters(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a clusters configuration.  # noqa: E501

        Import a clusters configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_clusters(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportClustersRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportClustersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_import_clusters_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_import_clusters_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_import_clusters_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Import a clusters configuration.  # noqa: E501

        Import a clusters configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_import_clusters_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ImportClustersRequest body: (required)
        :param str allocation_token: (required)
        :return: ImportClustersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_import_clusters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_import_clusters`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_import_clusters`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/centroid/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImportClustersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controllers_dataset_controller_set_clusters_active(self, body, allocation_token, **kwargs):  # noqa: E501
        """Set specific clusters configuration default.  # noqa: E501

        Set specific clusters configuration default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_set_clusters_active(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetClustersActiveRequest body: (required)
        :param str allocation_token: (required)
        :return: SetClustersActiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controllers_dataset_controller_set_clusters_active_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.controllers_dataset_controller_set_clusters_active_with_http_info(body, allocation_token, **kwargs)  # noqa: E501
            return data

    def controllers_dataset_controller_set_clusters_active_with_http_info(self, body, allocation_token, **kwargs):  # noqa: E501
        """Set specific clusters configuration default.  # noqa: E501

        Set specific clusters configuration default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controllers_dataset_controller_set_clusters_active_with_http_info(body, allocation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SetClustersActiveRequest body: (required)
        :param str allocation_token: (required)
        :return: SetClustersActiveResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allocation_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controllers_dataset_controller_set_clusters_active" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `controllers_dataset_controller_set_clusters_active`")  # noqa: E501
        # verify the required parameter 'allocation_token' is set
        if ('allocation_token' not in params or
                params['allocation_token'] is None):
            raise ValueError("Missing the required parameter `allocation_token` when calling `controllers_dataset_controller_set_clusters_active`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'allocation_token' in params:
            header_params['allocationToken'] = params['allocation_token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dataset/centroid/set', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SetClustersActiveResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
